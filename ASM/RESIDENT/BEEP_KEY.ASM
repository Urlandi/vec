;Лабораторная работа #2 по предмету "Операционные системы" вариант задания #2
;По нажатию "горячей" клавиши программа назначает  каждой символьной клавише
;звук определенной частоты , который издается при ее нажатии.  Повторное
;нажатие "горячей"  клавиши  отменяет "озвучивание" клавиатуры.
.model tiny
.data

;Текстовые сообщения в ходе работы программы+++++++++++++++++++++++++++++++++
 h_mes          db 'Используйте Scroll Lock для активации озвучивания.',10,13
                db 'Лабораторная работа №2 по курсу ОС ВолгГТУ',10,13
                db 'Выполнил студет Васильев Михаил группы ИВТ-362.',10,13,'$'
 er_mes1        db 'Параметры заданы неверно!',10,13
                db 'Используйте:',10,13
                db '-i для установки',10,13,'-r для выгрузки из памяти',10,13
                db '-h информация по программе',10,13,'$'
 er_mes2        db 'Программа уже находится в памяти.',10,13,'$'
 er_mes3        db 'Не могу удалить программу из памяти.',10,13,'$'
 end_mes        db '(c) 2003 by SHESS PyRE Std.',10,13,'$'
 end_mes1       db 'Программа успешно установлена в памяти.',10,13,'$'
 end_mes2       db 'Программа успешно удалена из памяти.',10,13,'$'

;Сегмент кода программы++++++++++++++++++++++++++++++++++++++++++++++++++++++
.code
.startup
;Точка входа в программу+++++++++++++++++++++++++++++++++++++++++++++++++++++
                jmp setup_program ;Переход на код инициализации резидента

signature       dw 0FEA0h         ;Подпись нашего обработчика

;Старые данные обработчика INT9 +++++++++++++++++++++++++++++++++++++++++++++
o_ip            dw 0
o_cs            dw 0

t               db 1              ;Флаг активизации
;Обработчик прерывания INT9 +++++++++++++++++++++++++++++++++++++++++++++++++
mainactiv       proc

                cli                 ;Запрет прерываний
                push ax             ;Сохраним на время

                in al,60h           ;Читаем нажатую клавишу
                mov ah,cs:[86h]     ;Получаем значения флага активизации
                cmp al,46h          ;Нажат ScrollLock
                jne ScLk

;Устанавливаем новое значение флага активизации++++++++++++++++++++++++++++++
                neg ah              ;Инвертируем
                mov cs:[86h],ah     ;Сохраняем обратно

ScLk:           sti                 ;Разрешаем прерывания
                cmp ah,1            ;Проверяем для начала озвучивания
                pop ax              ;Восстанавливаем
                je out_ret          ;Если не озвучиваем то старый INT9

;Эмулируем вызов прерывания++++++++++++++++++++++++++++++++++++++++++++++++++
                pushf
                call dword ptr cs:[082h]

                cli                 ;Запрещаем прерывания вновь

;Сохраняем регичтры которые используем+++++++++++++++++++++++++++++++++++++++
                push ax
                push dx
                push cx
                push ds
                push si

;Нстраиваем сегмент данных BIOS++++++++++++++++++++++++++++++++++++++++++++++
                mov ax,40h
                mov ds,ax

                mov si,word ptr ds:[01Ah]   ;Если голова буфера клавиатуры
                cmp si,word ptr ds:[01Ch]   ;равна хвосту, значит не наш
                je  net                     ;случай не озвучиваем

                mov ax,ds:[si]               ;Иначе читаем код символа
                cmp al,0E0h                  ;Специальные клавиши тоже не
                jne neR                      ;озвучиваем
                and ah,ah                    ;А вдруг "р"?
                jne net                      ;Нет не она
neR:            cmp al,020h                  ;Смотрим чтобы был отображаемым
                jb  net                      ;иначе не озвучиваем

                xor ah,ah        ;Настраиваем делитель частоты звучаний
                mov cl,2         ;клавиш как: код_клавиши*4
                shl ax,cl
                mov cx,ax        ;И сохраняем для дальнейшего использования


                mov al,10110110b ;Инициализируем 2ой канал таймера на
                out 43h,al       ;режим 3 работы генератора

                mov al,cl        ;Устанавливаем частоту
                out 42h,al       ;Младший байт
                mov al,ch        ;Старший байт
                out 42h,al

                in al,61h        ;Прочитать данные из порта состояния
                or al,3          ;Установить младшие биты
                out 61h,al       ;Включить звук

                xor cx,cx        ;Организуем задержку
                mov dx,0AFFFh    ;около 45 мс
                mov ah,86h       ;С помощью прерывания №15
                int 15h

                in al,61h        ;Прочитать данные из порта состояния;
                and al,11111100b ;Обнулить младшие биты
                out 61h,al       ;Выключить звук

;Восстанавливаем сохраненный используемые регистры+++++++++++++++++++++++++++
net:            pop si
                pop ds
                pop cx
                pop dx
                pop ax

                sti     ;Разрешаем прерывания
                iret    ;Выходим из обработки прерывания

out_ret:        jmp dword ptr cs:[82h] ;Вызов старого обработчика по флагу
mainactiv       endp
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
tsr_length      equ $-signature  ;Длина резидентной части

setup_program:  mov si,80h             ;Выбираем параметры из PSP
                mov cl,[si]            ;Если командная строка пуста
                and cl,cl              ;то мы прекращаем обработку и
                jne Lerror             ;уходим на обработку
                mov dx,offset er_mes1  ;первой ошибки
                jmp error

Lerror:         inc si                 ;Устанавливаем адрес начала строки
                mov ax,[si]            ;параметров и читаем два символа
                cmp ax,'i-'            ;Параметр установки в память
                je mem_install         ;Переход на код установки
                cmp ax,'r-'            ;Параметр выгрузки из памяти
                je mem_deinstall       ;Переходим на код выгрузки
                cmp ax,'h-'            ;Параметр помощи
                jne Linfo
                mov dx,offset h_mes    ;Вызываем ошибку под номером помощь
                jmp error

Linfo:          dec cl                 ;Уменьшаем счетчик символов
                jnz Lerror             ;Если не 0 читаем следующие данные

                mov dx,offset er_mes1  ;Если не произошёл выбор параметра
                jmp error              ;значит он задан неверно - ошибка

;Код установки резидента в память++++++++++++++++++++++++++++++++++++++++++++
mem_install:    mov ax,3509h           ;С помощью функции ДОС получаем
                int 21h                ;адрес вектора прерывания 9
                mov ax,signature       ;Проверяем есть ли по этому адресу
                cmp ax,es:[bx-7]       ;наша подпись
                jne  Linmemory         ;Если есть то установка программы в
                mov dx,offset er_mes2  ;память не требуестся - уходим на
                jmp error              ;ошибку

Linmemory:      mov o_ip,bx            ;Сохраняем значения адреса заменяемой
                mov o_cs,es            ;процедуры прерывания

                mov si,2Ch             ;Получаем значение адреса буфера с
                mov ax,[si]            ;переменными окружения ДОС для нашей
                mov es,ax              ;программы
                mov ah,49h             ;Освобождаем занимаемое буфером место
                int 21h

                mov ax,040h            ;Проверяем байт состояния клавиатуры
                mov es,ax              ;из области данных BIOS для
                mov al,es:[017h]       ;определения состояния Scroll Lock
                and al,00010000b       ;Если он не установлен
                jz ScrLock_action      ;ничего не меняем
                neg t                  ;иначе флаг взведён

ScrLock_action: mov cx,tsr_length       ;Переносим нашу резидентную часть в
                mov si,offset signature ;область сегмента PSP где раньше
                mov ax,ds               ;находился буфер параметров
                mov es,ax               ;командной строки нашей программы
                mov di,080h
rep             movsb

                mov ax,2509h            ;Устанавливаем новый обработчик
                mov dx,87h              ;прерывания 9
                int 21h

                mov ah,09h              ;Выводим сообщение об успешной
                mov dx,offset end_mes1  ;установке
                int 21h

                mov dx,80h+tsr_length   ;Выходим и остаемся резидентно
                int 27h                 ;прихватывая с собой часть PSP

;Код удаления резидента из памяти++++++++++++++++++++++++++++++++++++++++++++
mem_deinstall:  mov ax,3509h            ;Получаем вектор прерывания 9
                int 21h

                mov ax,signature        ;Проверяем наша ли программа там
                cmp ax,es:[bx-7]        ;установлена
                je Ldeinstall           ;Если нет то
                mov dx,offset er_mes3   ;обрабатываем ошибку
                jmp error

Ldeinstall:     push ds                 ;Сохраняем на время

                mov ax,es:[bx-3]        ;Восстанавливаем старые значения
                mov ds,ax               ;вектора прерывания
                mov dx,es:[bx-5]
                mov ax,2509h
                int 21h

                pop ds                  ;Восстанавливаем

                mov ah,49h              ;Освобождаем память занимаемую
                int 21h                 ;нашим обработчиком

                mov ax,ds               ;Восстанавливаем ES
                mov es,ax

                mov ah,09h              ;Выводим сообщение об успешной
                mov dx,offset end_mes2  ;выгрузке
                int 21h

                jmp end_prg             ;Уходим в конец

error:          mov ah,09h              ;Сообщения об ошибках
                int 21h

end_prg:        mov ah,09h              ;Финальное сообщение
                mov dx,offset end_mes
                int 21h

.exit                                   ;Выход
end